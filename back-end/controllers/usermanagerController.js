const User = require('../models/userModel');
const mongoose = require('mongoose');

exports.updateUser = async (req, res) => {
  try {
    const { username, email, password, description } = req.body;
    const { userId } = req.params;
    const loggedInUserId = req.user._id; // L·∫•y ID t·ª´ token

    console.log('üîπ userId from params:', userId);
    console.log('üîπ loggedInUserId from token:', loggedInUserId);

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ObjectId h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: 'Invalid User ID format.' });
    }

    // Ki·ªÉm tra quy·ªÅn c·∫≠p nh·∫≠t: Ch·ªâ cho ph√©p user c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh m√¨nh
    if (!loggedInUserId.equals(userId)) {
      return res
        .status(403)
        .json({ message: 'Forbidden - You can only update your own profile.' });
    }

    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa user trong DB
    const existingUser = await User.findById(userId);
    if (!existingUser) {
      return res.status(404).json({ message: 'User not found' });
    }

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi d√πng
    const updateData = {
      username,
      email,
      password,
      description,
      updatedAt: Date.now(),
    };

    // Th·ª±c hi·ªán c·∫≠p nh·∫≠t
    const updatedUser = await User.findByIdAndUpdate(userId, updateData, {
      new: true,
    });

    return res.status(200).json({
      message: 'Update successful',
      data: updatedUser,
    });
  } catch (error) {
    console.error('Error while updating user:', error);
    return res
      .status(500)
      .json({ message: 'Server error', error: error.message });
  }
};