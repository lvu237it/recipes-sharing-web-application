const User = require('../models/userModel');
const mongoose = require('mongoose');
const Recipe = require('../models/recipeModel');
//Code demo
// exports.createAnUser = async (req, res) => {
//   try {
//     const { username, role } = req.body;
//     await User.create({ username, role });

//     res.json({
//       status: 'success',
//     });
//   } catch (error) {
//     console.log('error while creating an user');
//   }
// };

exports.getAllUser = async (req, res) => {
  try {
    const user = await User.find().select(
      'username role email avatar description'
    );

    if (!user) {
      return res.status(404).json({ message: 'User not found.' });
    }

    res.status(200).json(user);
  } catch (error) {
    console.error('Error while getting user:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

//Get User in4 by userID
exports.getUserById = async (req, res) => {
  try {
    const { userId } = req.params;
    const loggedInUserId = req.user._id; // ID t·ª´ token

    console.log('üîπ userId from params:', userId);
    console.log('üîπ loggedInUserId from token:', loggedInUserId);

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ObjectId
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: 'Invalid User ID format.' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (!loggedInUserId.equals(userId)) {
      return res
        .status(403)
        .json({ message: 'Forbidden - You can only view your own profile.' });
    }

    // L·∫•y th√¥ng tin user t·ª´ DB
    const user = await User.findById(userId).select('-password');

    if (!user) {
      return res.status(404).json({ message: 'User not found.' });
    }

    res.status(200).json({ message: 'success', data: user });
  } catch (error) {
    console.error('Error while getting user by ID:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

// // Get all recipes of an user
// exports.findAllRecipesByUser = async (req, res) => {
//   try {
//     const { userId } = req.params;
//     const loggedInUserId = req.user._id; // L·∫•y ID user t·ª´ token

//     console.log('üîπ userId from params:', userId);
//     console.log('üîπ loggedInUserId from token:', loggedInUserId);
//     // Ki·ªÉm tra userId h·ª£p l·ªá
//     if (!mongoose.Types.ObjectId.isValid(userId)) {
//       return res.status(400).json({ message: 'Invalid User ID format.' });
//     }

//     // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
//     if (userId !== loggedInUserId.toString()) {
//       return res
//         .status(403)
//         .json({ message: 'Forbidden - You can only view your own recipes.' });
//     }

//     // L·∫•y page v√† limit t·ª´ query params, m·∫∑c ƒë·ªãnh page = 1, limit = 10
//     const page = parseInt(req.query.page) || 1;
//     const limit = parseInt(req.query.limit) || 10;
//     const skip = (page - 1) * limit;

//     // ƒê·∫øm t·ªïng s·ªë c√¥ng th·ª©c
//     const totalRecipes = await Recipe.countDocuments({ owner: userId });

//     // L·∫•y danh s√°ch c√¥ng th·ª©c c√≥ ph√¢n trang
//     const recipes = await Recipe.find({ owner: userId })
//       .skip(skip)
//       .limit(limit);

//     // T√≠nh t·ªïng s·ªë trang
//     const totalPages = Math.ceil(totalRecipes / limit);

//     res.status(200).json({
//       message: 'success',
//       currentPage: page,
//       totalPages,
//       totalRecipes,
//       data: recipes,
//     });
//   } catch (error) {
//     console.error('Error while getting recipes by user ID:', error);
//     res.status(500).json({ message: 'Server error', error: error.message });
//   }
// };

// Get all recipes of an user
exports.findAllRecipesByUser = async (req, res) => {
  try {
    const { userId } = req.params;
    const recipes = await Recipe.find({ owner: userId });

    res.status(200).json(recipes);
  } catch (error) {
    console.error('Error while getting recipes by user ID:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

//get detail recipes of an user
exports.findDetail = async (req, res) => {
  try {
    const { userId, recipeId } = req.params;
    const loggedInUserId = req.user._id; // L·∫•y ID t·ª´ token

    console.log('üîπ userId from params:', userId);
    console.log('üîπ loggedInUserId from token:', loggedInUserId);
    console.log('üîπ recipeId from params:', recipeId);

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ID h·ª£p l·ªá
    if (
      !mongoose.Types.ObjectId.isValid(userId) ||
      !mongoose.Types.ObjectId.isValid(recipeId)
    ) {
      return res.status(400).json({ message: 'Invalid ID format.' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (!loggedInUserId.equals(userId)) {
      return res
        .status(403)
        .json({ message: 'Forbidden - You can only view your own recipes.' });
    }

    // T√¨m c√¥ng th·ª©c theo ID v√† ki·ªÉm tra owner
    const recipe = await Recipe.findOne({ _id: recipeId, owner: userId });

    if (!recipe) {
      return res.status(404).json({ message: 'Recipe not found' });
    }

    res.status(200).json({
      message: 'success',
      data: recipe,
    });
  } catch (error) {
    console.error('Error while getting recipe details:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

//Update in4 user

exports.updateUser = async (req, res) => {
  try {
    const { username, email, password, description } = req.body;
    const { userId } = req.params;
    const loggedInUserId = req.user._id; // L·∫•y ID t·ª´ token

    console.log('üîπ userId from params:', userId);
    console.log('üîπ loggedInUserId from token:', loggedInUserId);

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ObjectId h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: 'Invalid User ID format.' });
    }

    // Ki·ªÉm tra quy·ªÅn c·∫≠p nh·∫≠t: Ch·ªâ cho ph√©p user c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ch√≠nh m√¨nh
    if (!loggedInUserId.equals(userId)) {
      return res
        .status(403)
        .json({ message: 'Forbidden - You can only update your own profile.' });
    }

    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa user trong DB
    const existingUser = await User.findById(userId);
    if (!existingUser) {
      return res.status(404).json({ message: 'User not found' });
    }

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi d√πng
    const updateData = {
      username,
      email,
      password,
      description,
      updatedAt: Date.now(),
    };

    // Th·ª±c hi·ªán c·∫≠p nh·∫≠t
    const updatedUser = await User.findByIdAndUpdate(userId, updateData, {
      new: true,
    });

    return res.status(200).json({
      message: 'Update successful',
      data: updatedUser,
    });
  } catch (error) {
    console.error('Error while updating user:', error);
    return res
      .status(500)
      .json({ message: 'Server error', error: error.message });
  }
};
